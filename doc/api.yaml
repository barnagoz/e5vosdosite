openapi: 3.0.3

info:
  title: E5vösDÖ API
  version: "1.0"
  description: |-
    - [The repository](https://github.com/difcsi/e5vosdosite)
  contact:
    name: Zoltán Mészáros
    email: zoltan.m@tuta.io
servers:
  - url: http://e5vosdo.hu/api
tags:
  - name: event
    description: Everything about events
  - name: user
    description: Everything about users
  - name: team
    description: Everything about teams
  - name: auth
    description: Everything about authentication
  - name: settings
    description: Everything about settings
paths:
  /user:
    description: Returns current user
    get:
      summary: Get current user
      tags:
        - user
      responses:
        "200":
          description: Current user data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Current user does not exist"

  /user/{id}:
    description: Returns user by id
    get:
      summary: Get user by id
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User does not exist"
        "403":
          description: "User does not have permission to access this resource"


  /events/:
    description: Returns all events
    get:
      summary: Get Event List
      tags:
        - event
      responses:
        '200':
          description: Event list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Create event
      tags:
        - event
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      security:
        - e5vosdo_auth:
          - write:events

  /events/{slotId}:
    description: Returns events in a slot
    get:
      summary: Get Event List
      tags:
        - event
      parameters:
        - name: slotId
          in: path
          required: true
          description: Slot ID
          schema:
            type: integer
      responses:
        '200':
          description: Events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '404':
          description: Slot not found
    put:
      summary: Update event
      tags:
        - event
      parameters:
        - name: slotId
          in: path
          required: true
          description: Slot ID
          schema:
            type: integer
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
      security:
        - e5vosdo_auth:
          - write:events
  /event/{eventId}:
    parameters:
      - name: eventId
        in: path
        description: ID of event
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get specific event
      tags:
        - event
      responses:
        '200':
          description: Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event doesn't exist
    put:
      summary: Update Event
      tags:
        - event
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '403':
          description: Can't update event
        '404':
          description: Event doesn't exist
    delete:
      summary: Delete event
      tags:
        - event
      responses:
        '200':
          description: Event deleted
        '403':
          description: Can't delete event
        '404':
          description: Event doesn't exist
  /event/{eventId}/attendees:
    description: Event attendance management

    get:
      description: Get event attendances
      responses:
        '200':
          description: Event attendances
        '403':
          description: Forbidden
        '404':
          description: Event not found

    post:
      description: Create event attendance
      responses:
        '201':
          description: Attendance created
        '403':
          description: Forbidden
        '404':
          description: Event not found
  /presentation/selected:
    get:
      summary: Get presentations user is signed up to (user selected them)
      tags:
        - event
      responses:
        '200':
          description: Presentations user is signed up to
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
  /presentation/{slotid}:
    parameters:
      - name: slotid
        in: path
        description: Id of corresponding slot
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Fetch presentations in slot
      tags:
        - event
      responses:
        '200':
          description: Presentations in slot
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
        '404':
          description: Slot not found
  

  /team:
    get:
      summary: "Team List"
      tags:
        - team
      responses:
        '200':
          description: Team list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

    post:
      summary: "Create team"
      tags:
        - team
      responses:
        '201':
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /team/{teamId}:
    parameters:
      - name: teamId
        in: path
        description: ID of TEAM
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get team
      tags:
        - team
      responses:
        '200':
          description: Team data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          description: Team not found
    put:
      summary: Update team
      tags:
        - team
      responses:
        '200':
          description: Team updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          description: Team not found
    delete:
      summary: Delete team
      tags:
        - team
      responses:
        '200':
          description: Team deleted
        '404':
          description: Team not found
  /team/{teamId}/members:
    description: Team member management

    get:
      description: Get team members
      responses:
        '200':
          description: Team members
        '403':
          description: Forbidden
        '404':
          description: Team not found

    post:
      description: Create team member
      responses:
        '201':
          description: Member created
        '403':
          description: Forbidden
        '404':
          description: Team not found
  /team/{teamId}/members/{userId}:
    parameters:
      - name: teamId
        in: path
        description: ID of TEAM
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: ID of USER
        required: true
        schema:
          type: integer
          format: int64
    post:
      description: Add user to team
      responses:
        '201':
          description: User added to team
        '403':
          description: Forbidden
        '404':
          description: Team or user not found
    delete:
      description: Delete team member
      responses:
        '200':
          description: Member deleted
        '403':
          description: Forbidden
        '404':
          description: Team or user not found
    put:
      description: Update team member
      responses:
        '200':
          description: Member updated
        '403':
          description: Forbidden
        '404':
          description: Team not found
  /setting:
    get:
      summary: "Settings"
      tags:
        - settings
      responses:
        '200':
          description: Settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
        '404':
          description: Forbidden
    post:
      summary: "Create settings"
      tags:
        - settings
      responses:
        '200':
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
        '403':
          description: Forbidden
  /setting/{key}:
    summary: perform action on setting
    parameters:
      - name: key
        in: path
        required: true
        schema:
          type: integer
          format: int64
    delete:
      summary: delete a setting
      tags:
        - settings
      responses:
        '404':
          description: Setting not found -- or -- Forbidden
        '200':
          description: setting deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
  /setting/{key}/{value}:
    summary: set a setting
    parameters:
      - name: key
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: value
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: set a setting
      tags:
        - settings
      responses:
        '404':
          description: Setting not found -- or -- Forbidden
        '200':
          description: setting toggled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
  /slot:
    post:
      summary: "Create slot"
      tags:
        - slot
      responses:
        '201':
          description: Slot created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        '403':
          description: Forbidden
    get:
      summary: Get slots
      tags:
        - slot
      responses:
        '200':
          description: Slot data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        '404':
          description: Slot not found
  /slot/{slotId}:
    parameters:
      - name: slotId
        in: path
        description: ID of SLOT
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: Update slot
      tags:
        - slot
      responses:
        '200':
          description: Slot updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        '404':
          description: Slot not found
        '403':
          description: Forbidden
    delete:
      summary: Delete slot
      tags:
        - slot
      responses:
        '200':
          description: Slot deleted
        '403':
          description: Forbidden
        '404':
          description: Slot not found

components:
  schemas:
    User:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          format: int64
          example: 10
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
    Team:
      type: object
      properties:
        code:
          type: string
          example: 4fc213
        name:
          type: string
          example: Sauercloud
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: StarCraft Verseny
        stub:
          type: string
          example: starcraft_verseny
        description:
          type: string
          nullable: true
        capacity:
          type: string
          format: int64
          nullable: true
        signup_type:
          type: string
          enum: ["individual", "team"]
          nullable: true
        signup_deadline:
          type: string
          nullable: true
        starts_at:
          type: string
          nullable: true
        ends_at:
          type: string
          nullable: true
    Slot:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: 1. előadássáv
        slot_type:
          type: string
          enum: ["Programsáv", "Előadássáv"]
        starts_at:
          type: string
        ends_at:
          type: string
    Location:
      type: object
      properties:
        name:
          type: string
        floor:
          type: string
          enum: [0, 1, 2, 3]
    Setting:
      type: object
      properties:
        key:
          type: string
        value:
          type: boolean
  securitySchemes:
    e5vosdo_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://e5vosdo.hu/login
          scopes:
            write:events: Modify events
